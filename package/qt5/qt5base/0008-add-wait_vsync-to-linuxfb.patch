diff -Naur a/src/plugins/platforms/linuxfb/qlinuxfbscreen.cpp b/src/plugins/platforms/linuxfb/qlinuxfbscreen.cpp
--- a/src/plugins/platforms/linuxfb/qlinuxfbscreen.cpp	2016-09-16 13:49:42.000000000 +0800
+++ b/src/plugins/platforms/linuxfb/qlinuxfbscreen.cpp	2023-06-13 14:56:53.872515572 +0800
@@ -63,11 +63,11 @@
     int fd = -1;
 
     if (access(dev.toLatin1().constData(), R_OK|W_OK) == 0)
-        fd = QT_OPEN(dev.toLatin1().constData(), O_RDWR);
+	fd = QT_OPEN(dev.toLatin1().constData(), O_RDWR);
 
     if (fd == -1) {
-        if (access(dev.toLatin1().constData(), R_OK) == 0)
-            fd = QT_OPEN(dev.toLatin1().constData(), O_RDONLY);
+	if (access(dev.toLatin1().constData(), R_OK) == 0)
+	    fd = QT_OPEN(dev.toLatin1().constData(), O_RDONLY);
     }
 
     return fd;
@@ -77,13 +77,13 @@
 {
     int depth = vinfo.bits_per_pixel;
     if (depth== 24) {
-        depth = vinfo.red.length + vinfo.green.length + vinfo.blue.length;
-        if (depth <= 0)
-            depth = 24; // reset if color component lengths are not reported
+	depth = vinfo.red.length + vinfo.green.length + vinfo.blue.length;
+	if (depth <= 0)
+	    depth = 24; // reset if color component lengths are not reported
     } else if (depth == 16) {
-        depth = vinfo.red.length + vinfo.green.length + vinfo.blue.length;
-        if (depth <= 0)
-            depth = 16;
+	depth = vinfo.red.length + vinfo.green.length + vinfo.blue.length;
+	if (depth <= 0)
+	    depth = 16;
     }
     return depth;
 }
@@ -94,34 +94,34 @@
     int yoff = vinfo.yoffset;
     int w, h;
     if (userGeometry.isValid()) {
-        w = userGeometry.width();
-        h = userGeometry.height();
-        if ((uint)w > vinfo.xres)
-            w = vinfo.xres;
-        if ((uint)h > vinfo.yres)
-            h = vinfo.yres;
-
-        int xxoff = userGeometry.x(), yyoff = userGeometry.y();
-        if (xxoff != 0 || yyoff != 0) {
-            if (xxoff < 0 || xxoff + w > (int)(vinfo.xres))
-                xxoff = vinfo.xres - w;
-            if (yyoff < 0 || yyoff + h > (int)(vinfo.yres))
-                yyoff = vinfo.yres - h;
-            xoff += xxoff;
-            yoff += yyoff;
-        } else {
-            xoff += (vinfo.xres - w)/2;
-            yoff += (vinfo.yres - h)/2;
-        }
+	w = userGeometry.width();
+	h = userGeometry.height();
+	if ((uint)w > vinfo.xres)
+	    w = vinfo.xres;
+	if ((uint)h > vinfo.yres)
+	    h = vinfo.yres;
+
+	int xxoff = userGeometry.x(), yyoff = userGeometry.y();
+	if (xxoff != 0 || yyoff != 0) {
+	    if (xxoff < 0 || xxoff + w > (int)(vinfo.xres))
+		xxoff = vinfo.xres - w;
+	    if (yyoff < 0 || yyoff + h > (int)(vinfo.yres))
+		yyoff = vinfo.yres - h;
+	    xoff += xxoff;
+	    yoff += yyoff;
+	} else {
+	    xoff += (vinfo.xres - w)/2;
+	    yoff += (vinfo.yres - h)/2;
+	}
     } else {
-        w = vinfo.xres;
-        h = vinfo.yres;
+	w = vinfo.xres;
+	h = vinfo.yres;
     }
 
     if (w == 0 || h == 0) {
-        qWarning("Unable to find screen geometry, using 320x240");
-        w = 320;
-        h = 240;
+	qWarning("Unable to find screen geometry, using 320x240");
+	w = 320;
+	h = 240;
     }
 
     return QRect(xoff, yoff, w, h);
@@ -132,19 +132,19 @@
     int mmWidth = mmSize.width(), mmHeight = mmSize.height();
 
     if (mmWidth <= 0 && mmHeight <= 0) {
-        if (vinfo.width != 0 && vinfo.height != 0
-            && vinfo.width != UINT_MAX && vinfo.height != UINT_MAX) {
-            mmWidth = vinfo.width;
-            mmHeight = vinfo.height;
-        } else {
-            const int dpi = 100;
-            mmWidth = qRound(res.width() * 25.4 / dpi);
-            mmHeight = qRound(res.height() * 25.4 / dpi);
-        }
+	if (vinfo.width != 0 && vinfo.height != 0
+	    && vinfo.width != UINT_MAX && vinfo.height != UINT_MAX) {
+	    mmWidth = vinfo.width;
+	    mmHeight = vinfo.height;
+	} else {
+	    const int dpi = 100;
+	    mmWidth = qRound(res.width() * 25.4 / dpi);
+	    mmHeight = qRound(res.height() * 25.4 / dpi);
+	}
     } else if (mmWidth > 0 && mmHeight <= 0) {
-        mmHeight = res.height() * mmWidth/res.width();
+	mmHeight = res.height() * mmWidth/res.width();
     } else if (mmHeight > 0 && mmWidth <= 0) {
-        mmWidth = res.width() * mmHeight/res.height();
+	mmWidth = res.width() * mmHeight/res.height();
     }
 
     return QSize(mmWidth, mmHeight);
@@ -153,86 +153,86 @@
 static QImage::Format determineFormat(const fb_var_screeninfo &info, int depth)
 {
     const fb_bitfield rgba[4] = { info.red, info.green,
-                                  info.blue, info.transp };
+				  info.blue, info.transp };
 
     QImage::Format format = QImage::Format_Invalid;
 
     switch (depth) {
     case 32: {
-        const fb_bitfield argb8888[4] = {{16, 8, 0}, {8, 8, 0},
-                                         {0, 8, 0}, {24, 8, 0}};
-        const fb_bitfield abgr8888[4] = {{0, 8, 0}, {8, 8, 0},
-                                         {16, 8, 0}, {24, 8, 0}};
-        if (memcmp(rgba, argb8888, 4 * sizeof(fb_bitfield)) == 0) {
-            format = QImage::Format_ARGB32;
-        } else if (memcmp(rgba, argb8888, 3 * sizeof(fb_bitfield)) == 0) {
-            format = QImage::Format_RGB32;
-        } else if (memcmp(rgba, abgr8888, 3 * sizeof(fb_bitfield)) == 0) {
-            format = QImage::Format_RGB32;
-            // pixeltype = BGRPixel;
-        }
-        break;
+	const fb_bitfield argb8888[4] = {{16, 8, 0}, {8, 8, 0},
+					 {0, 8, 0}, {24, 8, 0}};
+	const fb_bitfield abgr8888[4] = {{0, 8, 0}, {8, 8, 0},
+					 {16, 8, 0}, {24, 8, 0}};
+	if (memcmp(rgba, argb8888, 4 * sizeof(fb_bitfield)) == 0) {
+	    format = QImage::Format_ARGB32;
+	} else if (memcmp(rgba, argb8888, 3 * sizeof(fb_bitfield)) == 0) {
+	    format = QImage::Format_RGB32;
+	} else if (memcmp(rgba, abgr8888, 3 * sizeof(fb_bitfield)) == 0) {
+	    format = QImage::Format_RGB32;
+	    // pixeltype = BGRPixel;
+	}
+	break;
     }
     case 24: {
-        const fb_bitfield rgb888[4] = {{16, 8, 0}, {8, 8, 0},
-                                       {0, 8, 0}, {0, 0, 0}};
-        const fb_bitfield bgr888[4] = {{0, 8, 0}, {8, 8, 0},
-                                       {16, 8, 0}, {0, 0, 0}};
-        if (memcmp(rgba, rgb888, 3 * sizeof(fb_bitfield)) == 0) {
-            format = QImage::Format_RGB888;
-        } else if (memcmp(rgba, bgr888, 3 * sizeof(fb_bitfield)) == 0) {
-            format = QImage::Format_RGB888;
-            // pixeltype = BGRPixel;
-        }
-        break;
+	const fb_bitfield rgb888[4] = {{16, 8, 0}, {8, 8, 0},
+				       {0, 8, 0}, {0, 0, 0}};
+	const fb_bitfield bgr888[4] = {{0, 8, 0}, {8, 8, 0},
+				       {16, 8, 0}, {0, 0, 0}};
+	if (memcmp(rgba, rgb888, 3 * sizeof(fb_bitfield)) == 0) {
+	    format = QImage::Format_RGB888;
+	} else if (memcmp(rgba, bgr888, 3 * sizeof(fb_bitfield)) == 0) {
+	    format = QImage::Format_RGB888;
+	    // pixeltype = BGRPixel;
+	}
+	break;
     }
     case 18: {
-        const fb_bitfield rgb666[4] = {{12, 6, 0}, {6, 6, 0},
-                                       {0, 6, 0}, {0, 0, 0}};
-        if (memcmp(rgba, rgb666, 3 * sizeof(fb_bitfield)) == 0)
-            format = QImage::Format_RGB666;
-        break;
+	const fb_bitfield rgb666[4] = {{12, 6, 0}, {6, 6, 0},
+				       {0, 6, 0}, {0, 0, 0}};
+	if (memcmp(rgba, rgb666, 3 * sizeof(fb_bitfield)) == 0)
+	    format = QImage::Format_RGB666;
+	break;
     }
     case 16: {
-        const fb_bitfield rgb565[4] = {{11, 5, 0}, {5, 6, 0},
-                                       {0, 5, 0}, {0, 0, 0}};
-        const fb_bitfield bgr565[4] = {{0, 5, 0}, {5, 6, 0},
-                                       {11, 5, 0}, {0, 0, 0}};
-        if (memcmp(rgba, rgb565, 3 * sizeof(fb_bitfield)) == 0) {
-            format = QImage::Format_RGB16;
-        } else if (memcmp(rgba, bgr565, 3 * sizeof(fb_bitfield)) == 0) {
-            format = QImage::Format_RGB16;
-            // pixeltype = BGRPixel;
-        }
-        break;
+	const fb_bitfield rgb565[4] = {{11, 5, 0}, {5, 6, 0},
+				       {0, 5, 0}, {0, 0, 0}};
+	const fb_bitfield bgr565[4] = {{0, 5, 0}, {5, 6, 0},
+				       {11, 5, 0}, {0, 0, 0}};
+	if (memcmp(rgba, rgb565, 3 * sizeof(fb_bitfield)) == 0) {
+	    format = QImage::Format_RGB16;
+	} else if (memcmp(rgba, bgr565, 3 * sizeof(fb_bitfield)) == 0) {
+	    format = QImage::Format_RGB16;
+	    // pixeltype = BGRPixel;
+	}
+	break;
     }
     case 15: {
-        const fb_bitfield rgb1555[4] = {{10, 5, 0}, {5, 5, 0},
-                                        {0, 5, 0}, {15, 1, 0}};
-        const fb_bitfield bgr1555[4] = {{0, 5, 0}, {5, 5, 0},
-                                        {10, 5, 0}, {15, 1, 0}};
-        if (memcmp(rgba, rgb1555, 3 * sizeof(fb_bitfield)) == 0) {
-            format = QImage::Format_RGB555;
-        } else if (memcmp(rgba, bgr1555, 3 * sizeof(fb_bitfield)) == 0) {
-            format = QImage::Format_RGB555;
-            // pixeltype = BGRPixel;
-        }
-        break;
+	const fb_bitfield rgb1555[4] = {{10, 5, 0}, {5, 5, 0},
+					{0, 5, 0}, {15, 1, 0}};
+	const fb_bitfield bgr1555[4] = {{0, 5, 0}, {5, 5, 0},
+					{10, 5, 0}, {15, 1, 0}};
+	if (memcmp(rgba, rgb1555, 3 * sizeof(fb_bitfield)) == 0) {
+	    format = QImage::Format_RGB555;
+	} else if (memcmp(rgba, bgr1555, 3 * sizeof(fb_bitfield)) == 0) {
+	    format = QImage::Format_RGB555;
+	    // pixeltype = BGRPixel;
+	}
+	break;
     }
     case 12: {
-        const fb_bitfield rgb444[4] = {{8, 4, 0}, {4, 4, 0},
-                                       {0, 4, 0}, {0, 0, 0}};
-        if (memcmp(rgba, rgb444, 3 * sizeof(fb_bitfield)) == 0)
-            format = QImage::Format_RGB444;
-        break;
+	const fb_bitfield rgb444[4] = {{8, 4, 0}, {4, 4, 0},
+				       {0, 4, 0}, {0, 0, 0}};
+	if (memcmp(rgba, rgb444, 3 * sizeof(fb_bitfield)) == 0)
+	    format = QImage::Format_RGB444;
+	break;
     }
     case 8:
-        break;
+	break;
     case 1:
-        format = QImage::Format_Mono; //###: LSB???
-        break;
+	format = QImage::Format_Mono; //###: LSB???
+	break;
     default:
-        break;
+	break;
     }
 
     return format;
@@ -244,13 +244,13 @@
 
     int fd = -1;
     if (device.isEmpty()) {
-        for (const char * const *dev = devs; *dev; ++dev) {
-            fd = QT_OPEN(*dev, O_RDWR);
-            if (fd != -1)
-                break;
-        }
+	for (const char * const *dev = devs; *dev; ++dev) {
+	    fd = QT_OPEN(*dev, O_RDWR);
+	    if (fd != -1)
+		break;
+	}
     } else {
-        fd = QT_OPEN(QFile::encodeName(device).constData(), O_RDWR);
+	fd = QT_OPEN(QFile::encodeName(device).constData(), O_RDWR);
     }
 
     return fd;
@@ -262,8 +262,8 @@
     // remote console and there is nothing we can do about it.  The matching
     // call in resetTty should at least fail then, too, so we do no harm.
     if (ioctl(ttyfd, KDGETMODE, oldMode) == 0) {
-        if (doSwitch && *oldMode != KD_GRAPHICS)
-            ioctl(ttyfd, KDSETMODE, KD_GRAPHICS);
+	if (doSwitch && *oldMode != KD_GRAPHICS)
+	    ioctl(ttyfd, KDSETMODE, KD_GRAPHICS);
     }
 }
 
@@ -288,13 +288,13 @@
 QLinuxFbScreen::~QLinuxFbScreen()
 {
     if (mFbFd != -1) {
-        if (mMmap.data)
-            munmap(mMmap.data - mMmap.offset, mMmap.size);
-        close(mFbFd);
+	if (mMmap.data)
+	    munmap(mMmap.data - mMmap.offset, mMmap.size);
+	close(mFbFd);
     }
 
     if (mTtyFd != -1)
-        resetTty(mTtyFd, mOldTtyMode);
+	resetTty(mTtyFd, mOldTtyMode);
 
     delete mBlitter;
 }
@@ -314,52 +314,51 @@
 
     // Parse arguments
     foreach (const QString &arg, mArgs) {
-        QRegularExpressionMatch match;
-        if (arg == QLatin1String("nographicsmodeswitch"))
-            doSwitchToGraphicsMode = false;
-        else if (arg.contains(mmSizeRx, &match))
-            userMmSize = QSize(match.captured(1).toInt(), match.captured(2).toInt());
-        else if (arg.contains(sizeRx, &match))
-            userGeometry.setSize(QSize(match.captured(1).toInt(), match.captured(2).toInt()));
-        else if (arg.contains(offsetRx, &match))
-            userGeometry.setTopLeft(QPoint(match.captured(1).toInt(), match.captured(2).toInt()));
-        else if (arg.contains(ttyRx, &match))
-            ttyDevice = match.captured(1);
-        else if (arg.contains(fbRx, &match))
-            fbDevice = match.captured(1);
+	QRegularExpressionMatch match;
+	if (arg == QLatin1String("nographicsmodeswitch"))
+	    doSwitchToGraphicsMode = false;
+	else if (arg.contains(mmSizeRx, &match))
+	    userMmSize = QSize(match.captured(1).toInt(), match.captured(2).toInt());
+	else if (arg.contains(sizeRx, &match))
+	    userGeometry.setSize(QSize(match.captured(1).toInt(), match.captured(2).toInt()));
+	else if (arg.contains(offsetRx, &match))
+	    userGeometry.setTopLeft(QPoint(match.captured(1).toInt(), match.captured(2).toInt()));
+	else if (arg.contains(ttyRx, &match))
+	    ttyDevice = match.captured(1);
+	else if (arg.contains(fbRx, &match))
+	    fbDevice = match.captured(1);
     }
 
     if (fbDevice.isEmpty()) {
-        fbDevice = QLatin1String("/dev/fb0");
-        if (!QFile::exists(fbDevice))
-            fbDevice = QLatin1String("/dev/graphics/fb0");
-        if (!QFile::exists(fbDevice)) {
-            qWarning("Unable to figure out framebuffer device. Specify it manually.");
-            return false;
-        }
+	fbDevice = QLatin1String("/dev/fb0");
+	if (!QFile::exists(fbDevice))
+	    fbDevice = QLatin1String("/dev/graphics/fb0");
+	if (!QFile::exists(fbDevice)) {
+	    qWarning("Unable to figure out framebuffer device. Specify it manually.");
+	    return false;
+	}
     }
 
     // Open the device
     mFbFd = openFramebufferDevice(fbDevice);
     if (mFbFd == -1) {
-        qErrnoWarning(errno, "Failed to open framebuffer %s", qPrintable(fbDevice));
-        return false;
+	qErrnoWarning(errno, "Failed to open framebuffer %s", qPrintable(fbDevice));
+	return false;
     }
 
     // Read the fixed and variable screen information
     fb_fix_screeninfo finfo;
-    fb_var_screeninfo vinfo;
     memset(&vinfo, 0, sizeof(vinfo));
     memset(&finfo, 0, sizeof(finfo));
 
     if (ioctl(mFbFd, FBIOGET_FSCREENINFO, &finfo) != 0) {
-        qErrnoWarning(errno, "Error reading fixed information");
-        return false;
+	qErrnoWarning(errno, "Error reading fixed information");
+	return false;
     }
 
     if (ioctl(mFbFd, FBIOGET_VSCREENINFO, &vinfo)) {
-        qErrnoWarning(errno, "Error reading variable information");
-        return false;
+	qErrnoWarning(errno, "Error reading variable information");
+	return false;
     }
 
     mDepth = determineDepth(vinfo);
@@ -373,8 +372,8 @@
     mMmap.size = finfo.smem_len;
     uchar *data = (unsigned char *)mmap(0, mMmap.size, PROT_READ | PROT_WRITE, MAP_SHARED, mFbFd, 0);
     if ((long)data == -1) {
-        qErrnoWarning(errno, "Failed to mmap framebuffer");
-        return false;
+	qErrnoWarning(errno, "Failed to mmap framebuffer");
+	return false;
     }
 
     mMmap.offset = geometry.y() * mBytesPerLine + geometry.x() * mDepth / 8;
@@ -387,7 +386,7 @@
 
     mTtyFd = openTtyDevice(ttyDevice);
     if (mTtyFd == -1)
-        qErrnoWarning(errno, "Failed to open tty");
+	qErrnoWarning(errno, "Failed to open tty");
 
     switchToGraphicsMode(mTtyFd, doSwitchToGraphicsMode, &mOldTtyMode);
     blankScreen(mFbFd, false);
@@ -400,16 +399,18 @@
     QRegion touched = QFbScreen::doRedraw();
 
     if (touched.isEmpty())
-        return touched;
+	return touched;
 
     if (!mBlitter)
-        mBlitter = new QPainter(&mFbScreenImage);
+	mBlitter = new QPainter(&mFbScreenImage);
 
     const QVector<QRect> rects = touched.rects();
     mBlitter->setCompositionMode(QPainter::CompositionMode_Source);
 
+    ioctl(mFbFd, FBIO_WAITFORVSYNC, &vinfo);
+
     for (int i = 0; i < rects.size(); ++i)
-        mBlitter->drawImage(rects[i], *mScreenImage, rects[i]);
+	mBlitter->drawImage(rects[i], *mScreenImage, rects[i]);
 
     return touched;
 }
@@ -419,27 +420,26 @@
 QPixmap QLinuxFbScreen::grabWindow(WId wid, int x, int y, int width, int height) const
 {
     if (!wid) {
-        if (width < 0)
-            width = mFbScreenImage.width() - x;
-        if (height < 0)
-            height = mFbScreenImage.height() - y;
-        return QPixmap::fromImage(mFbScreenImage).copy(x, y, width, height);
+	if (width < 0)
+	    width = mFbScreenImage.width() - x;
+	if (height < 0)
+	    height = mFbScreenImage.height() - y;
+	return QPixmap::fromImage(mFbScreenImage).copy(x, y, width, height);
     }
 
     QFbWindow *window = windowForId(wid);
     if (window) {
-        const QRect geom = window->geometry();
-        if (width < 0)
-            width = geom.width() - x;
-        if (height < 0)
-            height = geom.height() - y;
-        QRect rect(geom.topLeft() + QPoint(x, y), QSize(width, height));
-        rect &= window->geometry();
-        return QPixmap::fromImage(mFbScreenImage).copy(rect);
+	const QRect geom = window->geometry();
+	if (width < 0)
+	    width = geom.width() - x;
+	if (height < 0)
+	    height = geom.height() - y;
+	QRect rect(geom.topLeft() + QPoint(x, y), QSize(width, height));
+	rect &= window->geometry();
+	return QPixmap::fromImage(mFbScreenImage).copy(rect);
     }
 
     return QPixmap();
 }
 
 QT_END_NAMESPACE
-
diff -Naur a/src/plugins/platforms/linuxfb/qlinuxfbscreen.h b/src/plugins/platforms/linuxfb/qlinuxfbscreen.h
--- a/src/plugins/platforms/linuxfb/qlinuxfbscreen.h	2016-09-16 13:49:42.000000000 +0800
+++ b/src/plugins/platforms/linuxfb/qlinuxfbscreen.h	2023-06-13 14:56:59.408590567 +0800
@@ -35,6 +35,7 @@
 #define QLINUXFBSCREEN_H
 
 #include <QtPlatformSupport/private/qfbscreen_p.h>
+#include <linux/fb.h>
 
 QT_BEGIN_NAMESPACE
 
@@ -68,6 +69,8 @@
         int offset, size;
     } mMmap;
 
+    fb_var_screeninfo vinfo;
+
     QPainter *mBlitter;
 };
 
